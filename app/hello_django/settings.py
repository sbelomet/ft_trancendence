"""
Django settings for hello_django project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
# import environ #JBIDAUX ALTERNATIVE
from pathlib import Path
from datetime import timedelta

from dotenv import load_dotenv
load_dotenv()

hosts_env = os.environ.get('DJANGO_ALLOWED_HOSTS', '')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
FINAL_HOST = os.environ.get("FINAL_HOST")
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").replace("FIXME_FINAL_HOST", FINAL_HOST).split(" ")

# Application definition

INSTALLED_APPS = [
	"daphne",
	'front',
	"chat",
	"server_side_pong",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
	"channels",
    'rest_framework',
    'rest_framework.authtoken',
	'rest_framework_simplejwt',
	'rest_framework_simplejwt.token_blacklist',
	'corsheaders',
    'oauth2_provider',
    "users",
    #'upload',
    "matchmaking",
	"django_celery_beat"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'users.middleware.refresh_token.RefreshTokenMiddleware',
	'users.middleware.otp_restriction.RestrictOTPAccessMiddleware',
	
]


ROOT_URLCONF = 'hello_django.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'hello_django.wsgi.application'
ASGI_APPLICATION = 'hello_django.asgi.application'

CHANNEL_LAYERS = {
	"default": {
		"BACKEND": "channels_redis.core.RedisChannelLayer",
		"CONFIG": {
			"hosts": [("redis", 6380)],
		},
	},
}

CELERY_BROKER_URL = 'redis://redis:6380/0'
CELERY_RESULT_BACKEND = 'redis://redis:6380/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

DATABASES = {
	"default": {
		"ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
		"NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
		"USER": os.environ.get("SQL_USER", "user"),
		"PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
		"HOST": os.environ.get("SQL_HOST", FINAL_HOST),
		"PORT": os.environ.get("SQL_PORT", "5432"),
	}
}


#Ajout pour utilisation de rest framwork et authentifications
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
	    'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
}

SIMPLE_JWT = {
	"ACCESS_TOKEN_LIFETIME": timedelta(days=1),
	"REFRESH_TOKEN_LIFETIME": timedelta(days=50),
	"ROTATE_REFRESH_TOKENS": True,
	"BLACKLIST_AFTER_ROTATION": True,
	"UPDATE_LAST_LOGIN": False,

	"ALGORITHM": "HS256",
	"SIGNING_KEY": SECRET_KEY,
	"VERIFYING_KEY": "",
	"AUDIENCE": None,
	"ISSUER": None,
	"JSON_ENCODER": None,
	"JWK_URL": None,
	"LEEWAY": 0,

	"AUTH_HEADER_TYPES": ("Bearer",),
	"AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
	"USER_ID_FIELD": "id",
	"USER_ID_CLAIM": "user_id",
	"USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

	"AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
	"TOKEN_TYPE_CLAIM": "token_type",
	"TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

	"JTI_CLAIM": "jti",

	"SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
	"SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
	"SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "users.serializers.MyTokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",

    'AUTH_COOKIE': 'access',
    # Cookie name. Enables cookies if value is set.
    'AUTH_COOKIE_REFRESH': 'refresh',
    # A string like "example.com", or None for standard domain cookie.
    'AUTH_COOKIE_DOMAIN': None,
    # Whether the auth cookies should be secure (https:// only).
    'AUTH_COOKIE_SECURE': True, 
    # Http only cookie flag.It's not fetch by javascript.
    'AUTH_COOKIE_HTTP_ONLY': True,
    'AUTH_COOKIE_PATH': '/',        # The path of the auth cookie.
    # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag.
    'AUTH_COOKIE_SAMESITE': 'Strict', # TODO: Modify to Lax

}


OAUTH2_CLIENT_ID = os.environ.get("OAUTH2_CLIENT_ID")
OAUTH2_CLIENT_SECRET = os.environ.get("OAUTH2_CLIENT_SECRET")
OAUTH2_AUTHORIZATION_URL = os.environ.get("OAUTH2_AUTHORIZATION_URL")
OAUTH2_TOKEN_URL = os.environ.get("OAUTH2_TOKEN_URL")
OAUTH2_USER_INFO_URL = os.environ.get("OAUTH2_USER_INFO_URL")
OAUTH2_REDIRECT_URI = os.environ.get("OAUTH2_REDIRECT_URI").replace("FIXME_FINAL_HOST", FINAL_HOST)
OAUTH2_STATE = os.environ.get("OAUTH2_STATE")



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
		'OPTIONS': {
            'min_length': 8,
        }
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Ajout de gestion utilisateur custom
AUTH_USER_MODEL = 'users.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'CET'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
	("node_modules", os.path.join(BASE_DIR, 'node_modules/')),
]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Others
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

# Adding CORS headers allows your resources to be accessed on other domains.
#CORS_ALLOW_ALL_ORIGINS = True  # DEV
CORS_ALLOWED_ORIGINS = ["https://localhost:2000",
                        "https://{FINAL_HOST}:2000"]  #PROD
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ["Content-Type", "X-CSRFToken"]  #for simpleJWT


CSRF_TRUSTED_ORIGINS = ["https://localhost:2000",
                        "https://{FINAL_HOST}:2000"]

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_SAMESITE = "Strict"

# EMAIL
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  
EMAIL_PORT = 587  # Common SMTP port for Gmail
EMAIL_USE_TLS = True  # Use TLS encryption for security
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')  # Your email address
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD') # Your email password
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# LOGGING
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}
